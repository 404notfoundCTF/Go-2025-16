在以太坊中，私钥和签名的关系是通过椭圆曲线数字签名算法（ECDSA）来实现的。
给定一个私钥和一个消息，可以生成一个唯一的签名。但是，仅凭一组签名，
并不能直接确定哪些签名对应于哪条消息，除非有额外的信息，比如签名时附加了消息哈希。

通常情况下，以太坊的签名会包含三个部分：r、s和v。为了确定一个签名对应于哪个消息，
你需要使用公钥（由私钥派生）和这个签名来验证该签名是否与该消息匹配。

 

提示：

 

1.签名算法过程如下，且签名过程中不使用随机数，即同一个消息，每次签名结果是一样的。

//message是被签名的消息

hash := crypto.Keccak256Hash([]byte(message))

//PrivateKey是私钥

signature, err3 := crypto.Sign(hash.Bytes(), PrivateKey)

 

2.在编写go语言代码时，可能会使用如下的import语句导入相应的库：

import (

   "encoding/hex"

   "fmt"

   "log"

   "github.com/ethereum/go-ethereum/crypto"

)

步骤
1
在本题中，你需要使用Go语言，完善searchSignature.go文件里的部分代码，
实现以下任务：对于给定的以太坊的一个私钥和两个指定的消息，以及一组签名，
其中有两个签名分别是私钥对上述两个消息的签名，你需要从这组签名中找到两个指定的消息的签名并返回。