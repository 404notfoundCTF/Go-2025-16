package main

import (
	"fmt"
)

// CountNonEmptySlots 计算一个分支节点中非空了节点的数量。
// 输入为一个十进制数，该数展开为16个二进制位，每个位为1表示对应槽位非空。
func CountNonEmptySlots(num int) int {
	count := 0
	//=======请在下方补充代码=======
	for i := 0; i < 16; i++ {
		// 检查第i位是否为1
		if (num & (1 << i)) != 0 {
			count++
		}
	}
	//=======请在上方补充代码=======
	return count
}

func main() {
	// 测试用例
	testCases := []int{
		0,     // 0000 0000 0000 0000，所有槽位都为空
		65535, // 1111 1111 1111 1111，所有槽位都非空
		43690, // 1010 1010 1010 1010，8个槽位非空
		21845, // 0101 0101 0101 0101，8个槽位非空
		255,   // 0000 0000 1111 1111，8个槽位非空
		40960, // 1010 0000 0000 0000，2个槽位非空
		1,     // 0000 0000 0000 0001，1个槽位非空
		32768, // 1000 0000 0000 0000，1个槽位非空
	}

	for _, tc := range testCases {
		fmt.Printf("输入: %d (二进制: %016b)\n", tc, tc)
		fmt.Printf("非空槽位数量: %d\n\n", CountNonEmptySlots(tc))
	}
}
